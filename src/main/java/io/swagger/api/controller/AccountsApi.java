/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package io.swagger.api.controller;

import io.swagger.model.Account;
import io.swagger.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
                            date = "2018-12-06T19:09:28.930Z[GMT]")

@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

  @ApiOperation(value = "get specified account", nickname = "accountsAccountIdGet",
                notes = "methos return details of specified account", response = Account.class,
                tags = {"account",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "account details", response = Account.class)
  })
  @RequestMapping(value = "/accounts/{accountId}",
                  produces = {"application/json"},
                  method = RequestMethod.GET)
  ResponseEntity<Account> accountsAccountIdGet(
      @ApiParam(value = "ID of account to return", required = true) @PathVariable("accountId")
          Long accountId);


  @ApiOperation(value = "transactions by account", nickname = "accountsAccountIdTransfersGet",
                notes = "get list of existing transactions for specific account",
                response = Transaction.class, responseContainer = "List", tags = {"account",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "account's transactions", response = Transaction.class,
                   responseContainer = "List")
  })
  @RequestMapping(value = "/accounts/{accountId}/transfers",
                  produces = {"application/json"},
                  method = RequestMethod.GET)
  ResponseEntity<List<Transaction>> accountsAccountIdTransfersGet(
      @ApiParam(value = "account ID", required = true) @PathVariable("accountId") Long accountId);


  @ApiOperation(value = "get list of existing account", nickname = "accountsGet",
                notes = "method return all existing accounts", response = Account.class,
                responseContainer = "List", tags = {"account",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "list of existin accounts", response = Account.class,
                   responseContainer = "List")
  })
  @RequestMapping(value = "/accounts",
                  produces = {"application/json"},
                  method = RequestMethod.GET)
  ResponseEntity<List<Account>> accountsGet();


  @ApiOperation(value = "create new account", nickname = "accountsPost",
                notes = "method for creation of new account", response = Account.class,
                tags = {"account",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "OK", response = Account.class)
  })
  @RequestMapping(value = "/accounts",
                  produces = {"application/json"},
                  consumes = {"application/json"},
                  method = RequestMethod.POST)
  ResponseEntity<Account> accountsPost(@ApiParam(value = "") @Valid @RequestBody Account body);

}
